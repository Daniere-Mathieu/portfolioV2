name: Manual Release Trigger
run-name: Manual Release triggered by ${{ github.actor }}

on:
  workflow_dispatch

jobs:
  CreateReleasePR:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Extract version from package.json
        id: version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Fetch all branches
        run: git fetch --all

      - name: Create release branch from first commit if needed
        run: |
          VERSION=${{ steps.version.outputs.version }}

          if git ls-remote --exit-code --heads origin release/${VERSION}; then
            echo "Release branch already exists, skipping."
            exit 0
          fi

          # Get the first commit in the repository
          FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)

          echo "Creating release branch from first commit: $FIRST_COMMIT"

          git checkout -b release/${VERSION} $FIRST_COMMIT
          git push origin release/${VERSION}
      - name: Create PR branch from main
        run: |
          git checkout origin/main
          git checkout -b main-to-release-${{ steps.version.outputs.version }}
          git push origin main-to-release-${{ steps.version.outputs.version }}

      - name: Create Pull Request using GitHub CLI
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ steps.version.outputs.version }}";
            const prTitle = `Release ${version}`;
            const prBody = `Merge \`main\` into \`release/${version}\` for release.`;
            const { data: existingPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:main-to-release-${version}`,
              base: `release/${version}`,
              state: "open"
            });
            if (existingPRs.length === 0) {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                head: `main-to-release-${version}`,
                base: `release/${version}`,
                body: prBody
              });
            } else {
              core.info("PR already exists.");
            }
